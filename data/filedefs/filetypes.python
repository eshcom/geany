# For complete documentation of this file, please see Geany's main documentation
[styling]
# Edit these in the colorscheme .conf file instead
default=default
std_word=keyword_1
add_word=keyword_1
com_word=keyword_1
ref_word=identifier_1
std_func=keyword_2
std_except=keyword_2
std_ident=keyword_2
identifier=identifier_1
# same_std_func - style for std_funcs keywords, but w/o opening brace
same_std_func=keyword_2
decorator=decorator
defclass=type
deffunc=function
function=identifier_1
constant=identifier_1
operator=operator
number=number_1
string=string_1
stringtriple=string_2
charstr=character
charstrtriple=string_2
stringeol=string_eol
escapeseq=string_1
formatseq=string_1
fstring=string_1
fstringtriple=string_2
fcharstr=character
fcharstrtriple=string_2
fstring_suboper=string_1
fstring_option=string_1
string_continued=string_1
line_continued=preprocessor
commentline=comment_line
commentblock=comment

[keywords]
# std_words and std_idents are auto-generated by scripts/update-python-identifiers.sh
# Standard keywords
std_words=and as assert async await break class continue def del elif else except finally for global if in is lambda nonlocal not or pass raise return try while with yield
# Additional keywords
add_words=from import exec print
# Common keywords
com_words=None True False NotImplemented Ellipsis
# References to the current instance of a class
ref_words=cls self
# Standard functions (BIFs)
std_funcs=__import__ abs aiter all anext any apply ascii basestring bin bool breakpoint buffer bytearray bytes callable chr classmethod cmp coerce compile complex delattr dict dir divmod enumerate eval execfile file filter float format frozenset getattr globals hasattr hash help hex id input int intern isinstance issubclass iter len list locals long map max memoryview min next object oct open ord pow property range raw_input reduce reload repr reversed round set setattr slice sorted staticmethod str sum super tuple type unichr unicode vars xrange zip
# Standard identifiers
std_idents=__cached__ __file__ __path__ __build_class__ __debug__ __doc__ __loader__ __name__ __package__ __spec__ copyright credits exit license quit
# Standard exceptions
std_excepts=ArithmeticError AssertionError AttributeError BaseException BaseExceptionGroup BlockingIOError BrokenPipeError BufferError BytesWarning ChildProcessError ConnectionAbortedError ConnectionError ConnectionRefusedError ConnectionResetError DeprecationWarning EOFError EncodingWarning EnvironmentError Exception ExceptionGroup FileExistsError FileNotFoundError FloatingPointError FutureWarning GeneratorExit GitError IOError ImportError ImportWarning IndentationError IndexError InterruptedError IsADirectoryError KeyError KeyboardInterrupt LookupError MemoryError ModuleNotFoundError NameError NotADirectoryError NotImplementedError OSError OverflowError PendingDeprecationWarning PermissionError ProcessLookupError RecursionError ReferenceError ResourceWarning RuntimeError RuntimeWarning StandardError StopAsyncIteration StopIteration SyntaxError SyntaxWarning SystemError SystemExit TabError TimeoutError TypeError UnboundLocalError UnicodeDecodeError UnicodeEncodeError UnicodeError UnicodeTranslateError UnicodeWarning UserWarning ValueError Warning ZeroDivisionError

[lexer_properties]
fold=0
fold.compact=0
fold.quotes.python=1
tab.timmy.whinge.level=0
lexer.python.stdidents.no.sub.identifiers=1
lexer.python.literals.binary=1
lexer.python.strings.u=1
lexer.python.strings.b=1
lexer.python.strings.f=1
lexer.python.strings.over.newline=0
lexer.python.unicode.identifiers=1
lexer.python.escape.sequence=0
lexer.python.format.sequence=0

[settings]
# default extension used when saving files
extension=py

# MIME type
mime_type=text/x-python

# the following characters are these which a "word" can contains, see documentation
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# single comment char, like # in this file
comment_single=#\s
# multiline comments
#comment_open="""
#comment_close="""

# set to false if a comment character/string should start at column 0 of a line, true uses any
# indentation of the line, e.g. setting to true causes the following on pressing CTRL+d
	#command_example();
# setting to false would generate this
#	command_example();
# This setting works only for single line comments
comment_use_indent=true

# context action command (please see Geany's main documentation for details)
context_action_cmd=

[indentation]
#width=4
# 0 is spaces, 1 is tabs, 2 is tab & spaces
#type=0

[build-menu]
# %f will be replaced by the complete filename
# %e will be replaced by the filename without extension
# (use only one of it at one time)
FT_00_LB=_Compile
FT_00_LB[ru]=_Скомпилировать
FT_00_CM=python -m py_compile "%f"
FT_00_WD=
FT_02_LB=_Lint
FT_02_LB[ru]=_Проверить код
FT_02_CM=pep8 --max-line-length=80 "%f"
FT_02_WD=
error_regex=(.+):([0-9]+):([0-9]+)
EX_00_LB=_Execute
EX_00_LB[ru]=_Выполнить
EX_00_CM=python "%f"
EX_00_WD=
